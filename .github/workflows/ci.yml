name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - develop

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PRIVATE_CHECKOUT }}
          submodules: recursive

      - name: Setup nodejs
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Cache Build Products
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Solgen
        run: make -j contracts

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          skip-go-installation: true
          skip-pkg-cache: true

  test:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PRIVATE_CHECKOUT }}
          submodules: recursive

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y gotestsum

      - name: Setup nodejs
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Cache Build Products
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build
        run: make build -j

      - name: run tests
        run: gotestsum --format short-verbose --jsonfile test-output.json -- -race ./... -coverprofile=coverage.txt -covermode=atomic -coverpkg=./...,./go-ethereum/...

      - name: Annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.0
        with:
          test-results: test-output.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: ./coverage.txt
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

