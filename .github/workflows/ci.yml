---
name: Go tests CI
run-name: Go tests CI triggered from @${{ github.actor }} of ${{ github.head_ref }}

on:
  workflow_dispatch:
  merge_group:
  pull_request:
  push:
    branches: [master, main]

jobs:
  # --- Determine which files have changed ---
  changes:
    name: Detect file changes
    runs-on: ubuntu-latest
    outputs:
      arbitrator_changed: ${{ steps.changed.outputs.arbitrator_any_changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with: {fetch-depth: 0}

      - name: Determine if Arbitrator changed
        id: changed
        uses: tj-actions/changed-files@v46.0.5
        with:
          files_yaml: |
            arbitrator:
              - 'arbitrator/**'
              - 'contracts/**'
              - 'Makefile'

  # --- Run Arbitrator tests: only when the files have changed ---
  arbitrator:
    name: Run Arbitrator tests
    needs: changes
    runs-on: arbitrator-ci
    if: needs.changes.outputs.arbitrator_changed == 'true'
    env:
      RUST_BACKTRACE: 1
      # RUSTFLAGS: -Dwarnings          # TODO: re-enable after wasmer upgrade

    steps:
      - name: Setup CI
        uses: ./.github/actions/ci-setup

      - name: Install custom go-ethereum
        run: |
          cd /tmp
          git clone --branch v1.16.2 --depth 1 https://github.com/ethereum/go-ethereum.git
          cd go-ethereum
          go build -o /usr/local/bin/geth ./cmd/geth

      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v14
        with:
          # Make sure to set a version number!
          version: 3.1.6
          # This is the name of the cache folder.
          # The cache folder will be placed in the build directory,
          #  so make sure it doesn't conflict with anything!
          no-cache: true

      - name: Make arbitrator libraries
        run: make -j wasm-ci-build

      - name: Clippy check
        run: cargo clippy --all --manifest-path arbitrator/Cargo.toml -- -D warnings

      - name: Run rust tests
        run: cargo test -p arbutil -p prover -p jit -p stylus --release --manifest-path arbitrator/prover/Cargo.toml

      - name: Check stylus_bechmark
        run: cargo check --manifest-path arbitrator/tools/stylus_benchmark/Cargo.toml

      - name: Rustfmt
        run: cargo fmt -p arbutil -p prover -p jit -p stylus --manifest-path arbitrator/Cargo.toml -- --check

      - name: Rustfmt - tools/stylus_benchmark
        run: cargo fmt --all --manifest-path arbitrator/tools/stylus_benchmark/Cargo.toml -- --check

      - name: Make proofs from test cases
        run: make -j test-gen-proofs

      - name: Start geth server
        run: |
          geth --dev --http --http.port 8545 &
          sleep 2

      - name: Run proof validation tests
        run: |
          npm install --global yarn
          cd contracts-legacy
          cp -r ../contracts/test/prover/proofs/* ./test/prover/proofs
          yarn install
          yarn build
          yarn build:forge:yul
          yarn hardhat --network localhost test test/prover/*.ts

  # --- Fast gate: Build + Lint only (required by can_enqueue) ---
  pr-gate:
    name: Gate build + lint
    runs-on: arbitrator-ci
    steps:
      - uses: ./.github/actions/ci-setup

      - name: Build
        run: make build test-go-deps -j8

      - name: Build all lint dependencies
        run: make -j8 build-node-deps

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          skip-cache: true
          skip-save-cache: true

      - name: Custom Lint
        run: go run ./linters ./...

      - name: Upload build artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gate-build-artifacts
          path: |
            target/lib/
            target/lib-wasm/
            target/include/brotli/

  # --- Full PR tests (not required by can_enqueue), still runs on every PR ---
  pr-tests:
    name: Full PR tests (matrix)
    runs-on: arbitrator-ci
    needs: pr-gate
    strategy:
      fail-fast: false
      matrix:
        test-mode: [defaults, pathdb, challenge, stylus, l3challenge]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: ./.github/actions/ci-setup

      - name: Download build artifacts (optional)
        uses: actions/download-artifact@v4
        with:
          name: gate-build-artifacts
          path: target

      - name: Set environment variables
        run: |
          mkdir -p target/tmp/deadbeefbee
          echo "TMPDIR=$(pwd)/target/tmp/deadbeefbee" >> "$GITHUB_ENV"
          echo "GOMEMLIMIT=6GiB" >> "$GITHUB_ENV"
          echo "GOGC=80" >> "$GITHUB_ENV"
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> "$GITHUB_ENV"

      - name: run tests without race detection and path state scheme
        if: matrix.test-mode == 'pathdb'
        run: >-
          ${{ github.workspace }}/.github/workflows/gotestsum.sh
          --tags cionly --timeout 90m --cover --test_state_scheme path

      - name: run tests without race detection and hash state scheme
        if: matrix.test-mode == 'defaults'
        run: >-
          ${{ github.workspace }}/.github/workflows/gotestsum.sh
          --tags cionly --timeout 60m --test_state_scheme hash

      - name: run redis tests
        if: matrix.test-mode == 'defaults'
        run: >-
          ${{ github.workspace }}/.github/workflows/gotestsum.sh
          --format short-verbose -- -p 1 -run TestRedis ./arbnode/... ./system_tests/...
          -coverprofile=coverage-redis.txt -covermode=atomic -coverpkg=./... -- --test_redis=redis://localhost:6379/0

      - name: create block input json file
        if: matrix.test-mode == 'defaults'
        run: >-
          ${{ github.workspace }}/.github/workflows/gotestsum.sh
          --format short-verbose -- -run TestProgramStorage$ ./system_tests/... --count 1 --
          --recordBlockInputs.enable=true --recordBlockInputs.WithBaseDir="${{ github.workspace }}/target"
          --recordBlockInputs.WithTimestampDirEnabled=false --recordBlockInputs.WithBlockIdInFileNameEnabled=false

      - name: run arbitrator prover on block input json
        if: matrix.test-mode == 'defaults'
        run: |
          make build-prover-bin
          target/bin/prover target/machines/latest/machine.wavm.br -b \
          --json-inputs="${{ github.workspace }}/target/TestProgramStorage/block_inputs.json"

      - name: run jit prover on block input json
        if: matrix.test-mode == 'defaults'
        run: |
          make build-jit
          if [ -n "$(target/bin/jit \
              --binary target/machines/latest/replay.wasm \
              --cranelift \
              --json-inputs='${{ github.workspace }}/target/TestProgramStorage/block_inputs.json')" ]; then
            echo "Error: Command produced output."
            exit 1
          fi

      - name: build challenge tests
        if: matrix.test-mode == 'challenge'
        run: go test -tags challengetest ./... -run=^$ -v

      - name: run L3 challenge tests
        if: matrix.test-mode == 'l3challenge'
        run: >-
          ${{ github.workspace }}/.github/workflows/gotestsum.sh
          --tags challengetest --run TestL3Challenge --timeout 120m --cover

      - name: run stylus tests
        if: matrix.test-mode == 'stylus'
        run: >-
          ${{ github.workspace }}/.github/workflows/gotestsum.sh
          --tags stylustest --run TestProgramArbitrator --timeout 60m --cover

      - name: Archive detailed run log
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-mode }}-full.log
          path: full.log

      - name: Upload coverage to Codecov
        if: matrix.test-mode == 'defaults'
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: ./coverage.txt,./coverage-redis.txt
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

  can_enqueue:
    needs: pr-gate
    if: always() && github.event_name != 'merge_group'
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Transform outcomes
        env:
          NEEDS: "${{toJSON(needs)}}"
        run: |
         ok=$(echo "$NEEDS" | jq -r '[.[] | .result | IN("success","skipped")] | all')
         test "$ok" = "true"

  can_merge:
    needs: [pr-tests, arbitrator]
    if: always() && github.event_name == 'merge_group'
    # Same thing as above, from here on:
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Transform outcomes
        env:
          NEEDS: "${{toJSON(needs)}}"
        run: |
         ok=$(echo "$NEEDS" | jq -r '[.[] | .result | IN("success","skipped")] | all')
         test "$ok" = "true"

  can_see_status:
    runs-on: ubuntu-latest
    steps:
      - run: true
