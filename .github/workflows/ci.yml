name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - develop

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PRIVATE_CHECKOUT }}
          submodules: recursive

      - name: Setup nodejs
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Install rust stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Build Products
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build all lint dependencies
        run: make -j build-node-deps

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          skip-go-installation: true
          skip-pkg-cache: true

  test:
    name: Go Tests
    runs-on: ubuntu-latest

    # Creates a redis container for redis tests
    services:
      redis:
        image: redis
        ports:
            - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PRIVATE_CHECKOUT }}
          submodules: recursive

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y gotestsum wabt

      - name: Setup nodejs
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Install wasm-ld
        run: |
          sudo apt-get update && sudo apt-get install -y lld-10
          sudo ln -s /usr/bin/wasm-ld-10 /usr/local/bin/wasm-ld

      - name: Install rust wasm32-unknown-unknown
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Install rust wasm32-wasi
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-wasi

      - name: Install rust stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Build Products
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Cache Rust Build Products
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            arbitrator/target/
            arbitrator/wasm-libraries/target/
            target/etc/initial-machine-cache/
          key: ${{ runner.os }}-cargo-min-${{ hashFiles('arbitrator/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build
        run: make build test-go-deps -j

      - name: run tests with race detection
        run: gotestsum --format short-verbose --jsonfile test-output-withrace.json -- -race ./...

      - name: Annotate tests with race detection
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.0
        with:
          test-results: test-output-withrace.json

      - name: run tests without race detection
        if: always()
        run: gotestsum --format short-verbose --jsonfile test-output.json -- ./... -coverprofile=coverage.txt -covermode=atomic -coverpkg=./...,./go-ethereum/...

      - name: Annotate tests without race detection
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.0
        with:
          test-results: test-output.json

      - name: run redis tests
        if: always()
        run: gotestsum --format short-verbose --jsonfile test-output-redis.json -- -p 1 -run TestSeqCoordinator -tags redistest ./arbnode/... ./system_tests/... -coverprofile=coverage-redis.txt -covermode=atomic -coverpkg=./...

      - name: Annotate redis tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.0
        with:
          test-results: test-output-redis.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: ./coverage.txt,coverage-redis.txt
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

