name: Espresso E2E test CI

on:
  workflow_dispatch:
  merge_group:
  pull_request:
  push:
    branches:
      - integration
      - celestia-integration

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Espresso E2E
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: >
          sudo apt update && sudo apt install -y wabt
          build-essential bison golang clang make

      - name: Install cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.31.6"

      - name: Install latest gotestsum
        uses: autero1/action-gotestsum@v2.0.0
        with:
          gotestsum_version: 1.12.0

      - name: free disk space
        uses: jlumbroso/free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: true

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"
          cache-dependency-path: "**/yarn.lock"

      - name: Install go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.x

      - name: Install wasm-ld
        run: |
          sudo apt-get update && sudo apt-get install -y lld-14
          sudo ln -s /usr/bin/wasm-ld-14 /usr/local/bin/wasm-ld

      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
        id: install-rust
        with:
          # TODO: remove pinning: https://github.com/EspressoSystems/nitro-espresso-integration/issues/257
          toolchain: "1.81.0"
          targets: "wasm32-unknown-unknown, wasm32-wasi"

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: v1.0.0
          cache: false

      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@nightly
        id: install-rust-nightly
        with:
          toolchain: "nightly-2024-10-06"
          targets: "wasm32-wasi, wasm32-unknown-unknown"
          components: "rust-src, rustfmt, clippy"

      - name: Install cbindgen
        run: cargo install cbindgen

      - name: Cache Build Products
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ matrix.test-mode }}
          restore-keys: ${{ runner.os }}-go-

      - name: Cache Rust Build Products
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            arbitrator/target/
            arbitrator/wasm-libraries/target/
            arbitrator/wasm-libraries/soft-float/SoftFloat/build
            target/etc/initial-machine-cache/
          key: ${{ runner.os }}-cargo-${{ steps.install-rust.outputs.rustc_hash }}-min-${{ hashFiles('arbitrator/Cargo.lock') }}-${{ matrix.test-mode }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.install-rust.outputs.rustc_hash }}-

      - name: Cache cbrotli
        uses: actions/cache@v3
        id: cache-cbrotli
        with:
          path: |
            target/include/brotli/
            target/lib-wasm/
            target/lib/libbrotlicommon-static.a
            target/lib/libbrotlienc-static.a
            target/lib/libbrotlidec-static.a
          key: ${{ runner.os }}-brotli-${{ hashFiles('scripts/build-brotli.sh') }}-${{ hashFiles('.github/workflows/arbitrator-ci.yaml') }}-${{ matrix.test-mode }}
          restore-keys: ${{ runner.os }}-brotli-

      - name: Build cbrotli-local
        if: steps.cache-cbrotli.outputs.cache-hit != 'true'
        run: ./scripts/build-brotli.sh -l

      - name: Build cbrotli-wasm in docker
        if: steps.cache-cbrotli.outputs.cache-hit != 'true'
        run: ./scripts/build-brotli.sh -w -d

      - name: Install solidty dependencies
        run: cd contracts && yarn install && forge install

      - name: Check tool versions
        run: |
          go version
          rustc --version
          cargo --version

      - name: Build
        run: make build build-replay-env -j

      - name: Install docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1.2.1
        with:
          version: "2.22.0"

      - name: Run Espresso tests
        run: |
          scripts/run-espresso-ci-job
