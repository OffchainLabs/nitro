# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  merge_group:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]
  schedule:
    - cron: '18 21 * * 5'

jobs:
  analyze:
    name: Analyze
    if: github.repository == 'OffchainLabs/nitro' # don't run in any forks without "Advanced Security" enabled
    runs-on: ubuntu-8
    permissions:
      actions: read
      contents: read
      security-events: write
    env:
      WABT_VERSION: 1.0.32

    strategy:
      fail-fast: false
      # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
      # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
      matrix:
        include:
          # Analyze Go code
          - language:  go 
            build-mode: manual

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies
      run: sudo apt update && sudo apt install -y wabt

    - name: Setup nodejs
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: '**/yarn.lock'

    - name: Install go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.x

    - name: Install wasm-ld
      run: |
        sudo apt-get update && sudo apt-get install -y lld-14
        sudo ln -s /usr/bin/wasm-ld-14 /usr/local/bin/wasm-ld

    - name: Install rust stable
      uses: dtolnay/rust-toolchain@stable
      id: install-rust
      with:
        toolchain: '1.84.1'
        targets: 'wasm32-wasip1, wasm32-unknown-unknown'
        components: 'llvm-tools-preview, rustfmt, clippy'

    - name: Install rust nightly
      uses: dtolnay/rust-toolchain@nightly
      id: install-rust-nightly
      with:
        toolchain: 'nightly-2025-02-14'
        targets: 'wasm32-wasip1, wasm32-unknown-unknown'
        components: 'rust-src, rustfmt, clippy'

    - name: Get Rust version
      id: rust-version
      run: echo "version=$(rustc --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT

    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        cache: false
        
    - name: Install cbindgen
      run: cargo install --force cbindgen

    - name: Cache Build Products
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.language }}-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-go-${{ matrix.language }}-

    - name: Cache wabt build
      id: cache-wabt
      uses: actions/cache@v3
      with:
        path: ~/wabt-prefix
        key: ${{ runner.os }}-wabt-codeql-${{ matrix.language }}-${{ env.WABT_VERSION }}

    - name: Cache cbrotli
      uses: actions/cache@v3
      id: cache-cbrotli
      with:
        path: |
          target/include/brotli/
          target/lib-wasm/
          target/lib/libbrotlicommon-static.a
          target/lib/libbrotlienc-static.a
          target/lib/libbrotlidec-static.a
        key: ${{ runner.os }}-brotli-${{ matrix.language }}-${{ hashFiles('scripts/build-brotli.sh') }}-${{ hashFiles('.github/workflows/arbitrator-ci.yaml') }}-codeql
        restore-keys: ${{ runner.os }}-brotli-${{ matrix.language }}-${{ hashFiles('scripts/build-brotli.sh') }}-${{ hashFiles('.github/workflows/arbitrator-ci.yaml') }}

    - name: Cache Rust Build Products
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/
          arbitrator/target/
          arbitrator/wasm-libraries/target/
          arbitrator/wasm-libraries/soft-float/SoftFloat/build
          target/etc/initial-machine-cache/
        key: ${{ runner.os }}-cargo-${{ matrix.language }}-${{ steps.rust-version.outputs.version }}-min-${{ hashFiles('arbitrator/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-${{ matrix.language }}-${{ steps.rust-version.outputs.version }}-

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality
        config-file: ./.github/codeql/codeql-config.yml

    - name: Build cbrotli-local
      if: steps.cache-cbrotli.outputs.cache-hit != 'true'
      run: ./scripts/build-brotli.sh -l

    - name: Build cbrotli-wasm in docker
      if: steps.cache-cbrotli.outputs.cache-hit != 'true'
      run: ./scripts/build-brotli.sh -w -d

    - name: Build Nitro for CodeQL
      run: make build -j

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

