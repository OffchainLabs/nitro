// Copyright 2021-2023, Offchain Labs, Inc.
// For license information, see https://github.com/nitro/blob/master/LICENSE

use std::fmt;
use std::fmt::{Debug, Display, Formatter};
use std::hash::Hash;
use wasmparser::Operator;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct OperatorCode(usize);

impl OperatorCode {
    // TODO: use std::mem::variant_count when it's stabilized
    pub const OPERATOR_COUNT: usize = 529;
}

impl Display for OperatorCode {
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        let name = match self.0 {
            0x00 => "Unreachable",
            0x01 => "Nop",
            0x02 => "Block",
            0x03 => "Loop",
            0x04 => "If",
            0x05 => "Else",
            0x06 => "Try",
            0x07 => "Catch",
            0x08 => "Throw",
            0x09 => "Rethrow",
            0x0a => "ThrowRef",
            0x0b => "End",
            0x0c => "Br",
            0x0d => "BrIf",
            0x0e => "BrTable",
            0x0f => "Return",
            0x10 => "Call",
            0x11 => "CallIndirect",
            0x12 => "ReturnCall",
            0x13 => "ReturnCallIndirect",
            0x14 => "CallRef",
            0x15 => "ReturnCallRef",
            0x18 => "Delegate",
            0x19 => "CatchAll",
            0x1a => "Drop",
            0x1b => "Select",
            0x1c => "TypedSelect",
            0x1f => "TryTable",
            0x20 => "LocalGet",
            0x21 => "LocalSet",
            0x22 => "LocalTee",
            0x23 => "GlobalGet",
            0x24 => "GlobalSet",
            0x25 => "TableGet",
            0x26 => "TableSet",
            0x28 => "I32Load",
            0x29 => "I64Load",
            0x2a => "F32Load",
            0x2b => "F64Load",
            0x2c => "I32Load8S",
            0x2d => "I32Load8U",
            0x2e => "I32Load16S",
            0x2f => "I32Load16U",
            0x30 => "I64Load8S",
            0x31 => "I64Load8U",
            0x32 => "I64Load16S",
            0x33 => "I64Load16U",
            0x34 => "I64Load32S",
            0x35 => "I64Load32U",
            0x36 => "I32Store",
            0x37 => "I64Store",
            0x38 => "F32Store",
            0x39 => "F64Store",
            0x3a => "I32Store8",
            0x3b => "I32Store16",
            0x3c => "I64Store8",
            0x3d => "I64Store16",
            0x3e => "I64Store32",
            0x3f => "MemorySize",
            0x40 => "MemoryGrow",
            0x41 => "I32Const",
            0x42 => "I64Const",
            0x43 => "F32Const",
            0x44 => "F64Const",
            0x45 => "I32Eqz",
            0x46 => "I32Eq",
            0x47 => "I32Ne",
            0x48 => "I32LtS",
            0x49 => "I32LtU",
            0x4a => "I32GtS",
            0x4b => "I32GtU",
            0x4c => "I32LeS",
            0x4d => "I32LeU",
            0x4e => "I32GeS",
            0x4f => "I32GeU",
            0x50 => "I64Eqz",
            0x51 => "I64Eq",
            0x52 => "I64Ne",
            0x53 => "I64LtS",
            0x54 => "I64LtU",
            0x55 => "I64GtS",
            0x56 => "I64GtU",
            0x57 => "I64LeS",
            0x58 => "I64LeU",
            0x59 => "I64GeS",
            0x5a => "I64GeU",
            0x5b => "F32Eq",
            0x5c => "F32Ne",
            0x5d => "F32Lt",
            0x5e => "F32Gt",
            0x5f => "F32Le",
            0x60 => "F32Ge",
            0x61 => "F64Eq",
            0x62 => "F64Ne",
            0x63 => "F64Lt",
            0x64 => "F64Gt",
            0x65 => "F64Le",
            0x66 => "F64Ge",
            0x67 => "I32Clz",
            0x68 => "I32Ctz",
            0x69 => "I32Popcnt",
            0x6a => "I32Add",
            0x6b => "I32Sub",
            0x6c => "I32Mul",
            0x6d => "I32DivS",
            0x6e => "I32DivU",
            0x6f => "I32RemS",
            0x70 => "I32RemU",
            0x71 => "I32And",
            0x72 => "I32Or",
            0x73 => "I32Xor",
            0x74 => "I32Shl",
            0x75 => "I32ShrS",
            0x76 => "I32ShrU",
            0x77 => "I32Rotl",
            0x78 => "I32Rotr",
            0x79 => "I64Clz",
            0x7a => "I64Ctz",
            0x7b => "I64Popcnt",
            0x7c => "I64Add",
            0x7d => "I64Sub",
            0x7e => "I64Mul",
            0x7f => "I64DivS",
            0x80 => "I64DivU",
            0x81 => "I64RemS",
            0x82 => "I64RemU",
            0x83 => "I64And",
            0x84 => "I64Or",
            0x85 => "I64Xor",
            0x86 => "I64Shl",
            0x87 => "I64ShrS",
            0x88 => "I64ShrU",
            0x89 => "I64Rotl",
            0x8a => "I64Rotr",
            0x8b => "F32Abs",
            0x8c => "F32Neg",
            0x8d => "F32Ceil",
            0x8e => "F32Floor",
            0x8f => "F32Trunc",
            0x90 => "F32Nearest",
            0x91 => "F32Sqrt",
            0x92 => "F32Add",
            0x93 => "F32Sub",
            0x94 => "F32Mul",
            0x95 => "F32Div",
            0x96 => "F32Min",
            0x97 => "F32Max",
            0x98 => "F32Copysign",
            0x99 => "F64Abs",
            0x9a => "F64Neg",
            0x9b => "F64Ceil",
            0x9c => "F64Floor",
            0x9d => "F64Trunc",
            0x9e => "F64Nearest",
            0x9f => "F64Sqrt",
            0xa0 => "F64Add",
            0xa1 => "F64Sub",
            0xa2 => "F64Mul",
            0xa3 => "F64Div",
            0xa4 => "F64Min",
            0xa5 => "F64Max",
            0xa6 => "F64Copysign",
            0xa7 => "I32WrapI64",
            0xa8 => "I32TruncF32S",
            0xa9 => "I32TruncF32U",
            0xaa => "I32TruncF64S",
            0xab => "I32TruncF64U",
            0xac => "I64ExtendI32S",
            0xad => "I64ExtendI32U",
            0xae => "I64TruncF32S",
            0xaf => "I64TruncF32U",
            0xb0 => "I64TruncF64S",
            0xb1 => "I64TruncF64U",
            0xb2 => "F32ConvertI32S",
            0xb3 => "F32ConvertI32U",
            0xb4 => "F32ConvertI64S",
            0xb5 => "F32ConvertI64U",
            0xb6 => "F32DemoteF64",
            0xb7 => "F64ConvertI32S",
            0xb8 => "F64ConvertI32U",
            0xb9 => "F64ConvertI64S",
            0xba => "F64ConvertI64U",
            0xbb => "F64PromoteF32",
            0xbc => "I32ReinterpretF32",
            0xbd => "I64ReinterpretF64",
            0xbe => "F32ReinterpretI32",
            0xbf => "F64ReinterpretI64",
            0xc0 => "I32Extend8S",
            0xc1 => "I32Extend16S",
            0xc2 => "I64Extend8S",
            0xc3 => "I64Extend16S",
            0xc4 => "I64Extend32S",
            0xd0 => "RefNull",
            0xd1 => "RefIsNull",
            0xd2 => "RefFunc",
            0xd3 => "RefAsNonNull",
            0xd4 => "BrOnNull",
            0xd5 => "RefEq",
            0xd6 => "BrOnNonNull",
            0xfb00 => "StructNew",
            0xfb01 => "StructNewDefault",
            0xfb02 => "StructGet",
            0xfb03 => "StructGetS",
            0xfb04 => "StructGetU",
            0xfb05 => "StructSet",
            0xfb06 => "ArrayNew",
            0xfb07 => "ArrayNewDefault",
            0xfb08 => "ArrayNewFixed",
            0xfb09 => "ArrayNewData",
            0xfb0a => "ArrayNewElem",
            0xfb0b => "ArrayGet",
            0xfb0c => "ArrayGetS",
            0xfb0d => "ArrayGetU",
            0xfb0e => "ArraySet",
            0xfb0f => "ArrayLen",
            0xfb10 => "ArrayFill",
            0xfb11 => "ArrayCopy",
            0xfb12 => "ArrayInitData",
            0xfb13 => "ArrayInitElem",
            0xfb14 => "RefTestNonNull",
            0xfb15 => "RefTestNullable",
            0xfb16 => "RefCastNonNull",
            0xfb17 => "RefCastNullable",
            0xfb18 => "BrOnCast",
            0xfb19 => "BrOnCastFail",
            0xfb1a => "AnyConvertExtern",
            0xfb1b => "ExternConvertAny",
            0xfb1c => "RefI31",
            0xfb1d => "I31GetS",
            0xfb1e => "I31GetU",
            0xfc00 => "I32TruncSatF32S",
            0xfc01 => "I32TruncSatF32U",
            0xfc02 => "I32TruncSatF64S",
            0xfc03 => "I32TruncSatF64U",
            0xfc04 => "I64TruncSatF32S",
            0xfc05 => "I64TruncSatF32U",
            0xfc06 => "I64TruncSatF64S",
            0xfc07 => "I64TruncSatF64U",
            0xfc08 => "MemoryInit",
            0xfc09 => "DataDrop",
            0xfc0a => "MemoryCopy",
            0xfc0b => "MemoryFill",
            0xfc0c => "TableInit",
            0xfc0d => "ElemDrop",
            0xfc0e => "TableCopy",
            0xfc0f => "TableGrow",
            0xfc10 => "TableSize",
            0xfc11 => "TableFill",
            0xfc12 => "MemoryDiscard",
            0xfd00 => "V128Load",
            0xfd01 => "V128Load8x8S",
            0xfd02 => "V128Load8x8U",
            0xfd03 => "V128Load16x4S",
            0xfd04 => "V128Load16x4U",
            0xfd05 => "V128Load32x2S",
            0xfd06 => "V128Load32x2U",
            0xfd07 => "V128Load8Splat",
            0xfd08 => "V128Load16Splat",
            0xfd09 => "V128Load32Splat",
            0xfd0a => "V128Load64Splat",
            0xfd0b => "V128Store",
            0xfd0c => "V128Const",
            0xfd0d => "I8x16Shuffle",
            0xfd0e => "I8x16Swizzle",
            0xfd0f => "I8x16Splat",
            0xfd10 => "I16x8Splat",
            0xfd11 => "I32x4Splat",
            0xfd12 => "I64x2Splat",
            0xfd13 => "F32x4Splat",
            0xfd14 => "F64x2Splat",
            0xfd15 => "I8x16ExtractLaneS",
            0xfd16 => "I8x16ExtractLaneU",
            0xfd17 => "I8x16ReplaceLane",
            0xfd18 => "I16x8ExtractLaneS",
            0xfd19 => "I16x8ExtractLaneU",
            0xfd1a => "I16x8ReplaceLane",
            0xfd1b => "I32x4ExtractLane",
            0xfd1c => "I32x4ReplaceLane",
            0xfd1d => "I64x2ExtractLane",
            0xfd1e => "I64x2ReplaceLane",
            0xfd1f => "F32x4ExtractLane",
            0xfd20 => "F32x4ReplaceLane",
            0xfd21 => "F64x2ExtractLane",
            0xfd22 => "F64x2ReplaceLane",
            0xfd23 => "I8x16Eq",
            0xfd24 => "I8x16Ne",
            0xfd25 => "I8x16LtS",
            0xfd26 => "I8x16LtU",
            0xfd27 => "I8x16GtS",
            0xfd28 => "I8x16GtU",
            0xfd29 => "I8x16LeS",
            0xfd2a => "I8x16LeU",
            0xfd2b => "I8x16GeS",
            0xfd2c => "I8x16GeU",
            0xfd2d => "I16x8Eq",
            0xfd2e => "I16x8Ne",
            0xfd2f => "I16x8LtS",
            0xfd30 => "I16x8LtU",
            0xfd31 => "I16x8GtS",
            0xfd32 => "I16x8GtU",
            0xfd33 => "I16x8LeS",
            0xfd34 => "I16x8LeU",
            0xfd35 => "I16x8GeS",
            0xfd36 => "I16x8GeU",
            0xfd37 => "I32x4Eq",
            0xfd38 => "I32x4Ne",
            0xfd39 => "I32x4LtS",
            0xfd3a => "I32x4LtU",
            0xfd3b => "I32x4GtS",
            0xfd3c => "I32x4GtU",
            0xfd3d => "I32x4LeS",
            0xfd3e => "I32x4LeU",
            0xfd3f => "I32x4GeS",
            0xfd40 => "I32x4GeU",
            0xfd41 => "F32x4Eq",
            0xfd42 => "F32x4Ne",
            0xfd43 => "F32x4Lt",
            0xfd44 => "F32x4Gt",
            0xfd45 => "F32x4Le",
            0xfd46 => "F32x4Ge",
            0xfd47 => "F64x2Eq",
            0xfd48 => "F64x2Ne",
            0xfd49 => "F64x2Lt",
            0xfd4a => "F64x2Gt",
            0xfd4b => "F64x2Le",
            0xfd4c => "F64x2Ge",
            0xfd4d => "V128Not",
            0xfd4e => "V128And",
            0xfd4f => "V128AndNot",
            0xfd50 => "V128Or",
            0xfd51 => "V128Xor",
            0xfd52 => "V128Bitselect",
            0xfd53 => "V128AnyTrue",
            0xfd54 => "V128Load8Lane",
            0xfd55 => "V128Load16Lane",
            0xfd56 => "V128Load32Lane",
            0xfd57 => "V128Load64Lane",
            0xfd58 => "V128Store8Lane",
            0xfd59 => "V128Store16Lane",
            0xfd5a => "V128Store32Lane",
            0xfd5b => "V128Store64Lane",
            0xfd5c => "V128Load32Zero",
            0xfd5d => "V128Load64Zero",
            0xfd5e => "F32x4DemoteF64x2Zero",
            0xfd5f => "F64x2PromoteLowF32x4",
            0xfd60 => "I8x16Abs",
            0xfd61 => "I8x16Neg",
            0xfd62 => "I8x16Popcnt",
            0xfd63 => "I8x16AllTrue",
            0xfd64 => "I8x16Bitmask",
            0xfd65 => "I8x16NarrowI16x8S",
            0xfd66 => "I8x16NarrowI16x8U",
            0xfd67 => "F32x4Ceil",
            0xfd68 => "F32x4Floor",
            0xfd69 => "F32x4Trunc",
            0xfd6a => "F32x4Nearest",
            0xfd6b => "I8x16Shl",
            0xfd6c => "I8x16ShrS",
            0xfd6d => "I8x16ShrU",
            0xfd6e => "I8x16Add",
            0xfd6f => "I8x16AddSatS",
            0xfd70 => "I8x16AddSatU",
            0xfd71 => "I8x16Sub",
            0xfd72 => "I8x16SubSatS",
            0xfd73 => "I8x16SubSatU",
            0xfd74 => "F64x2Ceil",
            0xfd75 => "F64x2Floor",
            0xfd76 => "I8x16MinS",
            0xfd77 => "I8x16MinU",
            0xfd78 => "I8x16MaxS",
            0xfd79 => "I8x16MaxU",
            0xfd7a => "F64x2Trunc",
            0xfd7b => "I8x16AvgrU",
            0xfd7c => "I16x8ExtAddPairwiseI8x16S",
            0xfd7d => "I16x8ExtAddPairwiseI8x16U",
            0xfd7e => "I32x4ExtAddPairwiseI16x8S",
            0xfd7f => "I32x4ExtAddPairwiseI16x8U",
            0xfd80 => "I16x8Abs",
            0xfd81 => "I16x8Neg",
            0xfd82 => "I16x8Q15MulrSatS",
            0xfd83 => "I16x8AllTrue",
            0xfd84 => "I16x8Bitmask",
            0xfd85 => "I16x8NarrowI32x4S",
            0xfd86 => "I16x8NarrowI32x4U",
            0xfd87 => "I16x8ExtendLowI8x16S",
            0xfd88 => "I16x8ExtendHighI8x16S",
            0xfd89 => "I16x8ExtendLowI8x16U",
            0xfd8a => "I16x8ExtendHighI8x16U",
            0xfd8b => "I16x8Shl",
            0xfd8c => "I16x8ShrS",
            0xfd8d => "I16x8ShrU",
            0xfd8e => "I16x8Add",
            0xfd8f => "I16x8AddSatS",
            0xfd90 => "I16x8AddSatU",
            0xfd91 => "I16x8Sub",
            0xfd92 => "I16x8SubSatS",
            0xfd93 => "I16x8SubSatU",
            0xfd94 => "F64x2Nearest",
            0xfd95 => "I16x8Mul",
            0xfd96 => "I16x8MinS",
            0xfd97 => "I16x8MinU",
            0xfd98 => "I16x8MaxS",
            0xfd99 => "I16x8MaxU",
            0xfd9b => "I16x8AvgrU",
            0xfd9c => "I16x8ExtMulLowI8x16S",
            0xfd9d => "I16x8ExtMulHighI8x16S",
            0xfd9e => "I16x8ExtMulLowI8x16U",
            0xfd9f => "I16x8ExtMulHighI8x16U",
            0xfda0 => "I32x4Abs",
            0xfda2 => "I8x16RelaxedSwizzle",
            0xfda1 => "I32x4Neg",
            0xfda3 => "I32x4AllTrue",
            0xfda4 => "I32x4Bitmask",
            0xfda5 => "I32x4RelaxedTruncF32x4S",
            0xfda6 => "I32x4RelaxedTruncF32x4U",
            0xfda7 => "I32x4ExtendLowI16x8S",
            0xfda8 => "I32x4ExtendHighI16x8S",
            0xfda9 => "I32x4ExtendLowI16x8U",
            0xfdaa => "I32x4ExtendHighI16x8U",
            0xfdab => "I32x4Shl",
            0xfdac => "I32x4ShrS",
            0xfdad => "I32x4ShrU",
            0xfdae => "I32x4Add",
            0xfdaf => "F32x4RelaxedMadd",
            0xfdb0 => "F32x4RelaxedNmadd",
            0xfdb1 => "I32x4Sub",
            0xfdb2 => "I8x16RelaxedLaneselect",
            0xfdb3 => "I16x8RelaxedLaneselect",
            0xfdb4 => "F32x4RelaxedMin",
            0xfdb5 => "I32x4Mul",
            0xfdb6 => "I32x4MinS",
            0xfdb7 => "I32x4MinU",
            0xfdb8 => "I32x4MaxS",
            0xfdb9 => "I32x4MaxU",
            0xfdba => "I32x4DotI16x8S",
            0xfdbc => "I32x4ExtMulLowI16x8S",
            0xfdbd => "I32x4ExtMulHighI16x8S",
            0xfdbe => "I32x4ExtMulLowI16x8U",
            0xfdbf => "I32x4ExtMulHighI16x8U",
            0xfdc0 => "I64x2Abs",
            0xfdc1 => "I64x2Neg",
            0xfdc3 => "I64x2AllTrue",
            0xfdc4 => "I64x2Bitmask",
            0xfdc5 => "I32x4RelaxedTruncF64x2SZero",
            0xfdc6 => "I32x4RelaxedTruncF64x2UZero",
            0xfdc7 => "I64x2ExtendLowI32x4S",
            0xfdc8 => "I64x2ExtendHighI32x4S",
            0xfdc9 => "I64x2ExtendLowI32x4U",
            0xfdca => "I64x2ExtendHighI32x4U",
            0xfdcb => "I64x2Shl",
            0xfdcc => "I64x2ShrS",
            0xfdcd => "I64x2ShrU",
            0xfdce => "I64x2Add",
            0xfdcf => "F64x2RelaxedMadd",
            0xfdd0 => "F64x2RelaxedNmadd",
            0xfdd1 => "I64x2Sub",
            0xfdd2 => "I32x4RelaxedLaneselect",
            0xfdd3 => "I64x2RelaxedLaneselect",
            0xfdd4 => "F64x2RelaxedMin",
            0xfdd5 => "I64x2Mul",
            0xfdd6 => "I64x2Eq",
            0xfdd7 => "I64x2Ne",
            0xfdd8 => "I64x2LtS",
            0xfdd9 => "I64x2GtS",
            0xfdda => "I64x2LeS",
            0xfddb => "I64x2GeS",
            0xfddc => "I64x2ExtMulLowI32x4S",
            0xfddd => "I64x2ExtMulHighI32x4S",
            0xfdde => "I64x2ExtMulLowI32x4U",
            0xfddf => "I64x2ExtMulHighI32x4U",
            0xfde0 => "F32x4Abs",
            0xfde1 => "F32x4Neg",
            0xfde2 => "F32x4RelaxedMax",
            0xfde3 => "F32x4Sqrt",
            0xfde4 => "F32x4Add",
            0xfde5 => "F32x4Sub",
            0xfde6 => "F32x4Mul",
            0xfde7 => "F32x4Div",
            0xfde8 => "F32x4Min",
            0xfde9 => "F32x4Max",
            0xfdea => "F32x4PMin",
            0xfdeb => "F32x4PMax",
            0xfdec => "F64x2Abs",
            0xfded => "F64x2Neg",
            0xfdee => "F64x2RelaxedMax",
            0xfdef => "F64x2Sqrt",
            0xfdf0 => "F64x2Add",
            0xfdf1 => "F64x2Sub",
            0xfdf2 => "F64x2Mul",
            0xfdf3 => "F64x2Div",
            0xfdf4 => "F64x2Min",
            0xfdf5 => "F64x2Max",
            0xfdf6 => "F64x2PMin",
            0xfdf7 => "F64x2PMax",
            0xfdf8 => "I32x4TruncSatF32x4S",
            0xfdf9 => "I32x4TruncSatF32x4U",
            0xfdfa => "F32x4ConvertI32x4S",
            0xfdfb => "F32x4ConvertI32x4U",
            0xfdfc => "I32x4TruncSatF64x2SZero",
            0xfdfd => "I32x4TruncSatF64x2UZero",
            0xfdfe => "F64x2ConvertLowI32x4S",
            0xfdff => "F64x2ConvertLowI32x4U",
            0xfe00 => "MemoryAtomicNotify",
            0xfe01 => "MemoryAtomicWait32",
            0xfe02 => "MemoryAtomicWait64",
            0xfe03 => "AtomicFence",
            0xfe10 => "I32AtomicLoad",
            0xfe11 => "I64AtomicLoad",
            0xfe12 => "I32AtomicLoad8U",
            0xfe13 => "I32AtomicLoad16U",
            0xfe14 => "I64AtomicLoad8U",
            0xfe15 => "I64AtomicLoad16U",
            0xfe16 => "I64AtomicLoad32U",
            0xfe17 => "I32AtomicStore",
            0xfe18 => "I64AtomicStore",
            0xfe19 => "I32AtomicStore8",
            0xfe1a => "I32AtomicStore16",
            0xfe1b => "I64AtomicStore8",
            0xfe1c => "I64AtomicStore16",
            0xfe1d => "I64AtomicStore32",
            0xfe1e => "I32AtomicRmwAdd",
            0xfe1f => "I64AtomicRmwAdd",
            0xfe20 => "I32AtomicRmw8AddU",
            0xfe21 => "I32AtomicRmw16AddU",
            0xfe22 => "I64AtomicRmw8AddU",
            0xfe23 => "I64AtomicRmw16AddU",
            0xfe24 => "I64AtomicRmw32AddU",
            0xfe25 => "I32AtomicRmwSub",
            0xfe26 => "I64AtomicRmwSub",
            0xfe27 => "I32AtomicRmw8SubU",
            0xfe28 => "I32AtomicRmw16SubU",
            0xfe29 => "I64AtomicRmw8SubU",
            0xfe2a => "I64AtomicRmw16SubU",
            0xfe2b => "I64AtomicRmw32SubU",
            0xfe2c => "I32AtomicRmwAnd",
            0xfe2d => "I64AtomicRmwAnd",
            0xfe2e => "I32AtomicRmw8AndU",
            0xfe2f => "I32AtomicRmw16AndU",
            0xfe30 => "I64AtomicRmw8AndU",
            0xfe31 => "I64AtomicRmw16AndU",
            0xfe32 => "I64AtomicRmw32AndU",
            0xfe33 => "I32AtomicRmwOr",
            0xfe34 => "I64AtomicRmwOr",
            0xfe35 => "I32AtomicRmw8OrU",
            0xfe36 => "I32AtomicRmw16OrU",
            0xfe37 => "I64AtomicRmw8OrU",
            0xfe38 => "I64AtomicRmw16OrU",
            0xfe39 => "I64AtomicRmw32OrU",
            0xfe3a => "I32AtomicRmwXor",
            0xfe3b => "I64AtomicRmwXor",
            0xfe3c => "I32AtomicRmw8XorU",
            0xfe3d => "I32AtomicRmw16XorU",
            0xfe3e => "I64AtomicRmw8XorU",
            0xfe3f => "I64AtomicRmw16XorU",
            0xfe40 => "I64AtomicRmw32XorU",
            0xfe41 => "I32AtomicRmwXchg",
            0xfe42 => "I64AtomicRmwXchg",
            0xfe43 => "I32AtomicRmw8XchgU",
            0xfe44 => "I32AtomicRmw16XchgU",
            0xfe45 => "I64AtomicRmw8XchgU",
            0xfe46 => "I64AtomicRmw16XchgU",
            0xfe47 => "I64AtomicRmw32XchgU",
            0xfe48 => "I32AtomicRmwCmpxchg",
            0xfe49 => "I64AtomicRmwCmpxchg",
            0xfe4a => "I32AtomicRmw8CmpxchgU",
            0xfe4b => "I32AtomicRmw16CmpxchgU",
            0xfe4c => "I64AtomicRmw8CmpxchgU",
            0xfe4d => "I64AtomicRmw16CmpxchgU",
            0xfe4e => "I64AtomicRmw32CmpxchgU",
            0xfd111 => "I16x8RelaxedQ15mulrS",
            0xfd112 => "I16x8RelaxedDotI8x16I7x16S",
            0xfd113 => "I32x4RelaxedDotI8x16I7x16AddS",
            _ => "UNKNOWN",
        };
        write!(f, "{name}")
    }
}

impl From<Operator<'_>> for OperatorCode {
    fn from(op: Operator) -> Self {
        OperatorCode::from(&op)
    }
}

impl From<&Operator<'_>> for OperatorCode {
    fn from(op: &Operator) -> Self {
        use Operator as O;

        OperatorCode(match op {
            O::Unreachable => 0x00,
            O::Nop => 0x01,
            O::Block { .. } => 0x02,
            O::Loop { .. } => 0x03,
            O::If { .. } => 0x04,
            O::Else => 0x05,
            O::Try { .. } => 0x06,
            O::Catch { .. } => 0x07,
            O::Throw { .. } => 0x08,
            O::Rethrow { .. } => 0x09,
            O::ThrowRef { .. } => 0x0A,
            O::End => 0x0b,
            O::Br { .. } => 0x0c,
            O::BrIf { .. } => 0x0d,
            O::BrTable { .. } => 0x0e,
            O::Return => 0x0f,
            O::Call { .. } => 0x10,
            O::CallIndirect { .. } => 0x11,
            O::ReturnCall { .. } => 0x12,
            O::ReturnCallIndirect { .. } => 0x13,
            O::CallRef { .. } => 0x14,
            O::ReturnCallRef { .. } => 0x15,
            O::Delegate { .. } => 0x18,
            O::CatchAll => 0x19,
            O::Drop => 0x1a,
            O::Select => 0x1b,
            O::TypedSelect { .. } => 0x1c,
            O::TryTable { .. } => 0x1f,
            O::LocalGet { .. } => 0x20,
            O::LocalSet { .. } => 0x21,
            O::LocalTee { .. } => 0x22,
            O::GlobalGet { .. } => 0x23,
            O::GlobalSet { .. } => 0x24,
            O::TableGet { .. } => 0x25,
            O::TableSet { .. } => 0x26,
            O::I32Load { .. } => 0x28,
            O::I64Load { .. } => 0x29,
            O::F32Load { .. } => 0x2a,
            O::F64Load { .. } => 0x2b,
            O::I32Load8S { .. } => 0x2c,
            O::I32Load8U { .. } => 0x2d,
            O::I32Load16S { .. } => 0x2e,
            O::I32Load16U { .. } => 0x2f,
            O::I64Load8S { .. } => 0x30,
            O::I64Load8U { .. } => 0x31,
            O::I64Load16S { .. } => 0x32,
            O::I64Load16U { .. } => 0x33,
            O::I64Load32S { .. } => 0x34,
            O::I64Load32U { .. } => 0x35,
            O::I32Store { .. } => 0x36,
            O::I64Store { .. } => 0x37,
            O::F32Store { .. } => 0x38,
            O::F64Store { .. } => 0x39,
            O::I32Store8 { .. } => 0x3a,
            O::I32Store16 { .. } => 0x3b,
            O::I64Store8 { .. } => 0x3c,
            O::I64Store16 { .. } => 0x3d,
            O::I64Store32 { .. } => 0x3e,
            O::MemorySize { .. } => 0x3f,
            O::MemoryGrow { .. } => 0x40,
            O::I32Const { .. } => 0x41,
            O::I64Const { .. } => 0x42,
            O::F32Const { .. } => 0x43,
            O::F64Const { .. } => 0x44,
            O::I32Eqz => 0x45,
            O::I32Eq => 0x46,
            O::I32Ne => 0x47,
            O::I32LtS => 0x48,
            O::I32LtU => 0x49,
            O::I32GtS => 0x4a,
            O::I32GtU => 0x4b,
            O::I32LeS => 0x4c,
            O::I32LeU => 0x4d,
            O::I32GeS => 0x4e,
            O::I32GeU => 0x4f,
            O::I64Eqz => 0x50,
            O::I64Eq => 0x51,
            O::I64Ne => 0x52,
            O::I64LtS => 0x53,
            O::I64LtU => 0x54,
            O::I64GtS => 0x55,
            O::I64GtU => 0x56,
            O::I64LeS => 0x57,
            O::I64LeU => 0x58,
            O::I64GeS => 0x59,
            O::I64GeU => 0x5a,
            O::F32Eq => 0x5b,
            O::F32Ne => 0x5c,
            O::F32Lt => 0x5d,
            O::F32Gt => 0x5e,
            O::F32Le => 0x5f,
            O::F32Ge => 0x60,
            O::F64Eq => 0x61,
            O::F64Ne => 0x62,
            O::F64Lt => 0x63,
            O::F64Gt => 0x64,
            O::F64Le => 0x65,
            O::F64Ge => 0x66,
            O::I32Clz => 0x67,
            O::I32Ctz => 0x68,
            O::I32Popcnt => 0x69,
            O::I32Add => 0x6a,
            O::I32Sub => 0x6b,
            O::I32Mul => 0x6c,
            O::I32DivS => 0x6d,
            O::I32DivU => 0x6e,
            O::I32RemS => 0x6f,
            O::I32RemU => 0x70,
            O::I32And => 0x71,
            O::I32Or => 0x72,
            O::I32Xor => 0x73,
            O::I32Shl => 0x74,
            O::I32ShrS => 0x75,
            O::I32ShrU => 0x76,
            O::I32Rotl => 0x77,
            O::I32Rotr => 0x78,
            O::I64Clz => 0x79,
            O::I64Ctz => 0x7a,
            O::I64Popcnt => 0x7b,
            O::I64Add => 0x7c,
            O::I64Sub => 0x7d,
            O::I64Mul => 0x7e,
            O::I64DivS => 0x7f,
            O::I64DivU => 0x80,
            O::I64RemS => 0x81,
            O::I64RemU => 0x82,
            O::I64And => 0x83,
            O::I64Or => 0x84,
            O::I64Xor => 0x85,
            O::I64Shl => 0x86,
            O::I64ShrS => 0x87,
            O::I64ShrU => 0x88,
            O::I64Rotl => 0x89,
            O::I64Rotr => 0x8a,
            O::F32Abs => 0x8b,
            O::F32Neg => 0x8c,
            O::F32Ceil => 0x8d,
            O::F32Floor => 0x8e,
            O::F32Trunc => 0x8f,
            O::F32Nearest => 0x90,
            O::F32Sqrt => 0x91,
            O::F32Add => 0x92,
            O::F32Sub => 0x93,
            O::F32Mul => 0x94,
            O::F32Div => 0x95,
            O::F32Min => 0x96,
            O::F32Max => 0x97,
            O::F32Copysign => 0x98,
            O::F64Abs => 0x99,
            O::F64Neg => 0x9a,
            O::F64Ceil => 0x9b,
            O::F64Floor => 0x9c,
            O::F64Trunc => 0x9d,
            O::F64Nearest => 0x9e,
            O::F64Sqrt => 0x9f,
            O::F64Add => 0xa0,
            O::F64Sub => 0xa1,
            O::F64Mul => 0xa2,
            O::F64Div => 0xa3,
            O::F64Min => 0xa4,
            O::F64Max => 0xa5,
            O::F64Copysign => 0xa6,
            O::I32WrapI64 => 0xa7,
            O::I32TruncF32S => 0xa8,
            O::I32TruncF32U => 0xa9,
            O::I32TruncF64S => 0xaa,
            O::I32TruncF64U => 0xab,
            O::I64ExtendI32S => 0xac,
            O::I64ExtendI32U => 0xad,
            O::I64TruncF32S => 0xae,
            O::I64TruncF32U => 0xaf,
            O::I64TruncF64S => 0xb0,
            O::I64TruncF64U => 0xb1,
            O::F32ConvertI32S => 0xb2,
            O::F32ConvertI32U => 0xb3,
            O::F32ConvertI64S => 0xb4,
            O::F32ConvertI64U => 0xb5,
            O::F32DemoteF64 => 0xb6,
            O::F64ConvertI32S => 0xb7,
            O::F64ConvertI32U => 0xb8,
            O::F64ConvertI64S => 0xb9,
            O::F64ConvertI64U => 0xba,
            O::F64PromoteF32 => 0xbb,
            O::I32ReinterpretF32 => 0xbc,
            O::I64ReinterpretF64 => 0xbd,
            O::F32ReinterpretI32 => 0xbe,
            O::F64ReinterpretI64 => 0xbf,
            O::I32Extend8S => 0xc0,
            O::I32Extend16S => 0xc1,
            O::I64Extend8S => 0xc2,
            O::I64Extend16S => 0xc3,
            O::I64Extend32S => 0xc4,
            O::RefNull { .. } => 0xd0,
            O::RefIsNull => 0xd1,
            O::RefFunc { .. } => 0xd2,
            O::RefAsNonNull => 0xd3,
            O::BrOnNull { .. } => 0xd4,
            O::RefEq { .. } => 0xd5,
            O::BrOnNonNull { .. } => 0xd6,
            O::StructNew { .. } => 0xfb00,
            O::StructNewDefault { .. } => 0xfb01,
            O::StructGet { .. } => 0xfb02,
            O::StructGetS { .. } => 0xfb03,
            O::StructGetU { .. } => 0xfb04,
            O::StructSet { .. } => 0xfb05,
            O::ArrayNew { .. } => 0xfb06,
            O::ArrayNewDefault { .. } => 0xfb07,
            O::ArrayNewFixed { .. } => 0xfb08,
            O::ArrayNewData { .. } => 0xfb09,
            O::ArrayNewElem { .. } => 0xfb0a,
            O::ArrayGet { .. } => 0xfb0b,
            O::ArrayGetS { .. } => 0xfb0c,
            O::ArrayGetU { .. } => 0xfb0d,
            O::ArraySet { .. } => 0xfb0e,
            O::ArrayLen { .. } => 0xfb0f,
            O::ArrayFill { .. } => 0xfb10,
            O::ArrayCopy { .. } => 0xfb11,
            O::ArrayInitData { .. } => 0xfb12,
            O::ArrayInitElem { .. } => 0xfb13,
            O::RefTestNonNull { .. } => 0xfb14,
            O::RefTestNullable { .. } => 0xfb15,
            O::RefCastNonNull { .. } => 0xfb16,
            O::RefCastNullable { .. } => 0xfb17,
            O::BrOnCast { .. } => 0xfb18,
            O::BrOnCastFail { .. } => 0xfb19,
            O::AnyConvertExtern => 0xfb1a,
            O::ExternConvertAny => 0xfb1b,
            O::RefI31 { .. } => 0xfb1c,
            O::I31GetS => 0xfb1d,
            O::I31GetU => 0xfb1e,
            O::I32TruncSatF32S => 0xfc00,
            O::I32TruncSatF32U => 0xfc01,
            O::I32TruncSatF64S => 0xfc02,
            O::I32TruncSatF64U => 0xfc03,
            O::I64TruncSatF32S => 0xfc04,
            O::I64TruncSatF32U => 0xfc05,
            O::I64TruncSatF64S => 0xfc06,
            O::I64TruncSatF64U => 0xfc07,
            O::MemoryInit { .. } => 0xfc08,
            O::DataDrop { .. } => 0xfc09,
            O::MemoryCopy { .. } => 0xfc0a,
            O::MemoryFill { .. } => 0xfc0b,
            O::TableInit { .. } => 0xfc0c,
            O::ElemDrop { .. } => 0xfc0d,
            O::TableCopy { .. } => 0xfc0e,
            O::TableGrow { .. } => 0xfc0f,
            O::TableSize { .. } => 0xfc10,
            O::TableFill { .. } => 0xfc11,
            O::MemoryDiscard { .. } => 0xfc12,
            O::V128Load { .. } => 0xfd00,
            O::V128Load8x8S { .. } => 0xfd01,
            O::V128Load8x8U { .. } => 0xfd02,
            O::V128Load16x4S { .. } => 0xfd03,
            O::V128Load16x4U { .. } => 0xfd04,
            O::V128Load32x2S { .. } => 0xfd05,
            O::V128Load32x2U { .. } => 0xfd06,
            O::V128Load8Splat { .. } => 0xfd07,
            O::V128Load16Splat { .. } => 0xfd08,
            O::V128Load32Splat { .. } => 0xfd09,
            O::V128Load64Splat { .. } => 0xfd0a,
            O::V128Store { .. } => 0xfd0b,
            O::V128Const { .. } => 0xfd0c,
            O::I8x16Shuffle { .. } => 0xfd0d,
            O::I8x16Swizzle => 0xfd0e,
            O::I8x16Splat => 0xfd0f,
            O::I16x8Splat => 0xfd10,
            O::I32x4Splat => 0xfd11,
            O::I64x2Splat => 0xfd12,
            O::F32x4Splat => 0xfd13,
            O::F64x2Splat => 0xfd14,
            O::I8x16ExtractLaneS { .. } => 0xfd15,
            O::I8x16ExtractLaneU { .. } => 0xfd16,
            O::I8x16ReplaceLane { .. } => 0xfd17,
            O::I16x8ExtractLaneS { .. } => 0xfd18,
            O::I16x8ExtractLaneU { .. } => 0xfd19,
            O::I16x8ReplaceLane { .. } => 0xfd1a,
            O::I32x4ExtractLane { .. } => 0xfd1b,
            O::I32x4ReplaceLane { .. } => 0xfd1c,
            O::I64x2ExtractLane { .. } => 0xfd1d,
            O::I64x2ReplaceLane { .. } => 0xfd1e,
            O::F32x4ExtractLane { .. } => 0xfd1f,
            O::F32x4ReplaceLane { .. } => 0xfd20,
            O::F64x2ExtractLane { .. } => 0xfd21,
            O::F64x2ReplaceLane { .. } => 0xfd22,
            O::I8x16Eq => 0xfd23,
            O::I8x16Ne => 0xfd24,
            O::I8x16LtS => 0xfd25,
            O::I8x16LtU => 0xfd26,
            O::I8x16GtS => 0xfd27,
            O::I8x16GtU => 0xfd28,
            O::I8x16LeS => 0xfd29,
            O::I8x16LeU => 0xfd2a,
            O::I8x16GeS => 0xfd2b,
            O::I8x16GeU => 0xfd2c,
            O::I16x8Eq => 0xfd2d,
            O::I16x8Ne => 0xfd2e,
            O::I16x8LtS => 0xfd2f,
            O::I16x8LtU => 0xfd30,
            O::I16x8GtS => 0xfd31,
            O::I16x8GtU => 0xfd32,
            O::I16x8LeS => 0xfd33,
            O::I16x8LeU => 0xfd34,
            O::I16x8GeS => 0xfd35,
            O::I16x8GeU => 0xfd36,
            O::I32x4Eq => 0xfd37,
            O::I32x4Ne => 0xfd38,
            O::I32x4LtS => 0xfd39,
            O::I32x4LtU => 0xfd3a,
            O::I32x4GtS => 0xfd3b,
            O::I32x4GtU => 0xfd3c,
            O::I32x4LeS => 0xfd3d,
            O::I32x4LeU => 0xfd3e,
            O::I32x4GeS => 0xfd3f,
            O::I32x4GeU => 0xfd40,
            O::F32x4Eq => 0xfd41,
            O::F32x4Ne => 0xfd42,
            O::F32x4Lt => 0xfd43,
            O::F32x4Gt => 0xfd44,
            O::F32x4Le => 0xfd45,
            O::F32x4Ge => 0xfd46,
            O::F64x2Eq => 0xfd47,
            O::F64x2Ne => 0xfd48,
            O::F64x2Lt => 0xfd49,
            O::F64x2Gt => 0xfd4a,
            O::F64x2Le => 0xfd4b,
            O::F64x2Ge => 0xfd4c,
            O::V128Not => 0xfd4d,
            O::V128And => 0xfd4e,
            O::V128AndNot => 0xfd4f,
            O::V128Or => 0xfd50,
            O::V128Xor => 0xfd51,
            O::V128Bitselect => 0xfd52,
            O::V128AnyTrue => 0xfd53,
            O::V128Load8Lane { .. } => 0xfd54,
            O::V128Load16Lane { .. } => 0xfd55,
            O::V128Load32Lane { .. } => 0xfd56,
            O::V128Load64Lane { .. } => 0xfd57,
            O::V128Store8Lane { .. } => 0xfd58,
            O::V128Store16Lane { .. } => 0xfd59,
            O::V128Store32Lane { .. } => 0xfd5a,
            O::V128Store64Lane { .. } => 0xfd5b,
            O::V128Load32Zero { .. } => 0xfd5c,
            O::V128Load64Zero { .. } => 0xfd5d,
            O::F32x4DemoteF64x2Zero => 0xfd5e,
            O::F64x2PromoteLowF32x4 => 0xfd5f,
            O::I8x16Abs => 0xfd60,
            O::I8x16Neg => 0xfd61,
            O::I8x16Popcnt => 0xfd62,
            O::I8x16AllTrue => 0xfd63,
            O::I8x16Bitmask => 0xfd64,
            O::I8x16NarrowI16x8S => 0xfd65,
            O::I8x16NarrowI16x8U => 0xfd66,
            O::F32x4Ceil => 0xfd67,
            O::F32x4Floor => 0xfd68,
            O::F32x4Trunc => 0xfd69,
            O::F32x4Nearest => 0xfd6a,
            O::I8x16Shl => 0xfd6b,
            O::I8x16ShrS => 0xfd6c,
            O::I8x16ShrU => 0xfd6d,
            O::I8x16Add => 0xfd6e,
            O::I8x16AddSatS => 0xfd6f,
            O::I8x16AddSatU => 0xfd70,
            O::I8x16Sub => 0xfd71,
            O::I8x16SubSatS => 0xfd72,
            O::I8x16SubSatU => 0xfd73,
            O::F64x2Ceil => 0xfd74,
            O::F64x2Floor => 0xfd75,
            O::I8x16MinS => 0xfd76,
            O::I8x16MinU => 0xfd77,
            O::I8x16MaxS => 0xfd78,
            O::I8x16MaxU => 0xfd79,
            O::F64x2Trunc => 0xfd7a,
            O::I8x16AvgrU => 0xfd7b,
            O::I16x8ExtAddPairwiseI8x16S => 0xfd7c,
            O::I16x8ExtAddPairwiseI8x16U => 0xfd7d,
            O::I32x4ExtAddPairwiseI16x8S => 0xfd7e,
            O::I32x4ExtAddPairwiseI16x8U => 0xfd7f,
            O::I16x8Abs => 0xfd80,
            O::I16x8Neg => 0xfd81,
            O::I16x8Q15MulrSatS => 0xfd82,
            O::I16x8AllTrue => 0xfd83,
            O::I16x8Bitmask => 0xfd84,
            O::I16x8NarrowI32x4S => 0xfd85,
            O::I16x8NarrowI32x4U => 0xfd86,
            O::I16x8ExtendLowI8x16S => 0xfd87,
            O::I16x8ExtendHighI8x16S => 0xfd88,
            O::I16x8ExtendLowI8x16U => 0xfd89,
            O::I16x8ExtendHighI8x16U => 0xfd8a,
            O::I16x8Shl => 0xfd8b,
            O::I16x8ShrS => 0xfd8c,
            O::I16x8ShrU => 0xfd8d,
            O::I16x8Add => 0xfd8e,
            O::I16x8AddSatS => 0xfd8f,
            O::I16x8AddSatU => 0xfd90,
            O::I16x8Sub => 0xfd91,
            O::I16x8SubSatS => 0xfd92,
            O::I16x8SubSatU => 0xfd93,
            O::F64x2Nearest => 0xfd94,
            O::I16x8Mul => 0xfd95,
            O::I16x8MinS => 0xfd96,
            O::I16x8MinU => 0xfd97,
            O::I16x8MaxS => 0xfd98,
            O::I16x8MaxU => 0xfd99,
            O::I16x8AvgrU => 0xfd9b,
            O::I16x8ExtMulLowI8x16S => 0xfd9c,
            O::I16x8ExtMulHighI8x16S => 0xfd9d,
            O::I16x8ExtMulLowI8x16U => 0xfd9e,
            O::I16x8ExtMulHighI8x16U => 0xfd9f,
            O::I32x4Abs => 0xfda0,
            O::I8x16RelaxedSwizzle => 0xfda2,
            O::I32x4Neg => 0xfda1,
            O::I32x4AllTrue => 0xfda3,
            O::I32x4Bitmask => 0xfda4,
            O::I32x4RelaxedTruncF32x4S => 0xfda5,
            O::I32x4RelaxedTruncF32x4U => 0xfda6,
            O::I32x4ExtendLowI16x8S => 0xfda7,
            O::I32x4ExtendHighI16x8S => 0xfda8,
            O::I32x4ExtendLowI16x8U => 0xfda9,
            O::I32x4ExtendHighI16x8U => 0xfdaa,
            O::I32x4Shl => 0xfdab,
            O::I32x4ShrS => 0xfdac,
            O::I32x4ShrU => 0xfdad,
            O::I32x4Add => 0xfdae,
            O::F32x4RelaxedMadd => 0xfdaf,
            O::F32x4RelaxedNmadd => 0xfdb0,
            O::I32x4Sub => 0xfdb1,
            O::I8x16RelaxedLaneselect => 0xfdb2,
            O::I16x8RelaxedLaneselect => 0xfdb3,
            O::F32x4RelaxedMin => 0xfdb4,
            O::I32x4Mul => 0xfdb5,
            O::I32x4MinS => 0xfdb6,
            O::I32x4MinU => 0xfdb7,
            O::I32x4MaxS => 0xfdb8,
            O::I32x4MaxU => 0xfdb9,
            O::I32x4DotI16x8S => 0xfdba,
            O::I32x4ExtMulLowI16x8S => 0xfdbc,
            O::I32x4ExtMulHighI16x8S => 0xfdbd,
            O::I32x4ExtMulLowI16x8U => 0xfdbe,
            O::I32x4ExtMulHighI16x8U => 0xfdbf,
            O::I64x2Abs => 0xfdc0,
            O::I64x2Neg => 0xfdc1,
            O::I64x2AllTrue => 0xfdc3,
            O::I64x2Bitmask => 0xfdc4,
            O::I32x4RelaxedTruncF64x2SZero => 0xfdc5,
            O::I32x4RelaxedTruncF64x2UZero => 0xfdc6,
            O::I64x2ExtendLowI32x4S => 0xfdc7,
            O::I64x2ExtendHighI32x4S => 0xfdc8,
            O::I64x2ExtendLowI32x4U => 0xfdc9,
            O::I64x2ExtendHighI32x4U => 0xfdca,
            O::I64x2Shl => 0xfdcb,
            O::I64x2ShrS => 0xfdcc,
            O::I64x2ShrU => 0xfdcd,
            O::I64x2Add => 0xfdce,
            O::F64x2RelaxedMadd => 0xfdcf,
            O::F64x2RelaxedNmadd => 0xfdd0,
            O::I64x2Sub => 0xfdd1,
            O::I32x4RelaxedLaneselect => 0xfdd2,
            O::I64x2RelaxedLaneselect => 0xfdd3,
            O::F64x2RelaxedMin => 0xfdd4,
            O::I64x2Mul => 0xfdd5,
            O::I64x2Eq => 0xfdd6,
            O::I64x2Ne => 0xfdd7,
            O::I64x2LtS => 0xfdd8,
            O::I64x2GtS => 0xfdd9,
            O::I64x2LeS => 0xfdda,
            O::I64x2GeS => 0xfddb,
            O::I64x2ExtMulLowI32x4S => 0xfddc,
            O::I64x2ExtMulHighI32x4S => 0xfddd,
            O::I64x2ExtMulLowI32x4U => 0xfdde,
            O::I64x2ExtMulHighI32x4U => 0xfddf,
            O::F32x4Abs => 0xfde0,
            O::F32x4Neg => 0xfde1,
            O::F32x4RelaxedMax => 0xfde2,
            O::F32x4Sqrt => 0xfde3,
            O::F32x4Add => 0xfde4,
            O::F32x4Sub => 0xfde5,
            O::F32x4Mul => 0xfde6,
            O::F32x4Div => 0xfde7,
            O::F32x4Min => 0xfde8,
            O::F32x4Max => 0xfde9,
            O::F32x4PMin => 0xfdea,
            O::F32x4PMax => 0xfdeb,
            O::F64x2Abs => 0xfdec,
            O::F64x2Neg => 0xfded,
            O::F64x2RelaxedMax => 0xfdee,
            O::F64x2Sqrt => 0xfdef,
            O::F64x2Add => 0xfdf0,
            O::F64x2Sub => 0xfdf1,
            O::F64x2Mul => 0xfdf2,
            O::F64x2Div => 0xfdf3,
            O::F64x2Min => 0xfdf4,
            O::F64x2Max => 0xfdf5,
            O::F64x2PMin => 0xfdf6,
            O::F64x2PMax => 0xfdf7,
            O::I32x4TruncSatF32x4S => 0xfdf8,
            O::I32x4TruncSatF32x4U => 0xfdf9,
            O::F32x4ConvertI32x4S => 0xfdfa,
            O::F32x4ConvertI32x4U => 0xfdfb,
            O::I32x4TruncSatF64x2SZero => 0xfdfc,
            O::I32x4TruncSatF64x2UZero => 0xfdfd,
            O::F64x2ConvertLowI32x4S => 0xfdfe,
            O::F64x2ConvertLowI32x4U => 0xfdff,
            O::MemoryAtomicNotify { .. } => 0xfe00,
            O::MemoryAtomicWait32 { .. } => 0xfe01,
            O::MemoryAtomicWait64 { .. } => 0xfe02,
            O::AtomicFence { .. } => 0xfe03,
            O::I32AtomicLoad { .. } => 0xfe10,
            O::I64AtomicLoad { .. } => 0xfe11,
            O::I32AtomicLoad8U { .. } => 0xfe12,
            O::I32AtomicLoad16U { .. } => 0xfe13,
            O::I64AtomicLoad8U { .. } => 0xfe14,
            O::I64AtomicLoad16U { .. } => 0xfe15,
            O::I64AtomicLoad32U { .. } => 0xfe16,
            O::I32AtomicStore { .. } => 0xfe17,
            O::I64AtomicStore { .. } => 0xfe18,
            O::I32AtomicStore8 { .. } => 0xfe19,
            O::I32AtomicStore16 { .. } => 0xfe1a,
            O::I64AtomicStore8 { .. } => 0xfe1b,
            O::I64AtomicStore16 { .. } => 0xfe1c,
            O::I64AtomicStore32 { .. } => 0xfe1d,
            O::I32AtomicRmwAdd { .. } => 0xfe1e,
            O::I64AtomicRmwAdd { .. } => 0xfe1f,
            O::I32AtomicRmw8AddU { .. } => 0xfe20,
            O::I32AtomicRmw16AddU { .. } => 0xfe21,
            O::I64AtomicRmw8AddU { .. } => 0xfe22,
            O::I64AtomicRmw16AddU { .. } => 0xfe23,
            O::I64AtomicRmw32AddU { .. } => 0xfe24,
            O::I32AtomicRmwSub { .. } => 0xfe25,
            O::I64AtomicRmwSub { .. } => 0xfe26,
            O::I32AtomicRmw8SubU { .. } => 0xfe27,
            O::I32AtomicRmw16SubU { .. } => 0xfe28,
            O::I64AtomicRmw8SubU { .. } => 0xfe29,
            O::I64AtomicRmw16SubU { .. } => 0xfe2a,
            O::I64AtomicRmw32SubU { .. } => 0xfe2b,
            O::I32AtomicRmwAnd { .. } => 0xfe2c,
            O::I64AtomicRmwAnd { .. } => 0xfe2d,
            O::I32AtomicRmw8AndU { .. } => 0xfe2e,
            O::I32AtomicRmw16AndU { .. } => 0xfe2f,
            O::I64AtomicRmw8AndU { .. } => 0xfe30,
            O::I64AtomicRmw16AndU { .. } => 0xfe31,
            O::I64AtomicRmw32AndU { .. } => 0xfe32,
            O::I32AtomicRmwOr { .. } => 0xfe33,
            O::I64AtomicRmwOr { .. } => 0xfe34,
            O::I32AtomicRmw8OrU { .. } => 0xfe35,
            O::I32AtomicRmw16OrU { .. } => 0xfe36,
            O::I64AtomicRmw8OrU { .. } => 0xfe37,
            O::I64AtomicRmw16OrU { .. } => 0xfe38,
            O::I64AtomicRmw32OrU { .. } => 0xfe39,
            O::I32AtomicRmwXor { .. } => 0xfe3a,
            O::I64AtomicRmwXor { .. } => 0xfe3b,
            O::I32AtomicRmw8XorU { .. } => 0xfe3c,
            O::I32AtomicRmw16XorU { .. } => 0xfe3d,
            O::I64AtomicRmw8XorU { .. } => 0xfe3e,
            O::I64AtomicRmw16XorU { .. } => 0xfe3f,
            O::I64AtomicRmw32XorU { .. } => 0xfe40,
            O::I32AtomicRmwXchg { .. } => 0xfe41,
            O::I64AtomicRmwXchg { .. } => 0xfe42,
            O::I32AtomicRmw8XchgU { .. } => 0xfe43,
            O::I32AtomicRmw16XchgU { .. } => 0xfe44,
            O::I64AtomicRmw8XchgU { .. } => 0xfe45,
            O::I64AtomicRmw16XchgU { .. } => 0xfe46,
            O::I64AtomicRmw32XchgU { .. } => 0xfe47,
            O::I32AtomicRmwCmpxchg { .. } => 0xfe48,
            O::I64AtomicRmwCmpxchg { .. } => 0xfe49,
            O::I32AtomicRmw8CmpxchgU { .. } => 0xfe4a,
            O::I32AtomicRmw16CmpxchgU { .. } => 0xfe4b,
            O::I64AtomicRmw8CmpxchgU { .. } => 0xfe4c,
            O::I64AtomicRmw16CmpxchgU { .. } => 0xfe4d,
            O::I64AtomicRmw32CmpxchgU { .. } => 0xfe4e,
            O::I16x8RelaxedQ15mulrS { .. } => 0xfd111,
            O::I16x8RelaxedDotI8x16I7x16S { .. } => 0xfd112,
            O::I32x4RelaxedDotI8x16I7x16AddS { .. } => 0xfd113,
        })
    }
}

pub trait OperatorInfo {
    fn ends_basic_block(&self) -> bool;
    fn code(&self) -> OperatorCode;
}

impl OperatorInfo for Operator<'_> {
    fn ends_basic_block(&self) -> bool {
        use Operator::*;

        macro_rules! dot {
            ($first:ident $(,$opcode:ident)*) => {
                $first { .. } $(| $opcode { .. })*
            };
        }

        matches!(
            self,
            End | Else | Return | dot!(Loop, Br, BrTable, BrIf, If, Call, CallIndirect)
        )
    }

    fn code(&self) -> OperatorCode {
        self.into()
    }
}
